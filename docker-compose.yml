networks:
  app-network:

services:
  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: notesdb
      POSTGRES_HOST_AUTH_METHOD: "md5"
    ports:
      - "5432:5432"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d/

    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: backend
    ports:
      - "8000:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    image: nginx:latest
    container_name: frontend
    volumes:
      - ./frontend/index.html:/usr/share/nginx/html/index.html
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/certs/selfsigned/localhost.key:/etc/ssl/localcerts/localhost.key
      - ./frontend/certs/selfsigned/localhost.crt:/etc/ssl/localcerts/localhost.crt
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "443:443"
    depends_on:
      - backend
    networks:
      - app-network

    # keep nginx from caching stale DNS if your app scales/changes IPs often
    dns_search: .

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.simple.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    depends_on:
      - blackbox
      - node-exporter
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "13000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - app-network

  blackbox:
    image: prom/blackbox-exporter:latest
    container_name: blackbox
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.simple.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - app-network

  # Host metrics (Docker Desktop VM)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro
    ports:
      - "9100:9100"
    networks:
      - app-network


  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"      # optional UI
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    restart: unless-stopped
    command:
      - -nginx.scrape-uri=http://frontend/nginx_status
    ports:
      - "9113:9113"   # exporter listens here
    networks:
      - app-network

volumes:
  pgdata:
  prometheus-data:
  grafana-data: